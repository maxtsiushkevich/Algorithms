#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>
#include <stdio.h>
int num;
struct graf
{
    int capacity; // пропускная способность ребр
    int cost; // стоимость единицы потока
    int flow; // поток, который уже течет по ребру
    int rest_capacity; // остаточная пропускная способность
    bool edge; // является ли ребром, нужно для дейстры, так как может быть cost=0
    bool residual; // принадлежание ребра остаточной сети
};
void null (struct graf **graph, int n)
{
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            graph[i][j].capacity = 0;
            graph[i][j].cost = 0;
            graph[i][j].flow = 0;
            graph[i][j].rest_capacity = 0;
            graph[i][j].edge = 0;
            graph[i][j].residual = 0;
        }
    }
}
void residual (struct graf **graph, int n)
{
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
            graph[i][j].residual = 0;
    }
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            if ((graph[i][j].edge == 1) && (graph[i][j].flow < graph[i][j].capacity))
            {
                graph[i][j].rest_capacity = graph[i][j].capacity - graph[i][j].flow;
                graph[i][j].residual = 1;
            }
        }
    }
}
int *dijkstra (struct graf **graph, int n) // ищет самый дешевый путь относительно стоимости за единицу
        // перед дейкстрой всегда создавать новую функцией residual
{
    int *flag;
    int tmp, point, i, temp;
    if (!(flag = (int*) malloc(n*sizeof(int)))) // флаги: 0-не посещена, 1-посещена
        exit (33);
    int *dist;
    if (!(dist = (int*) malloc(n*sizeof(int))))
        exit (33);
    for (i=0; i<n; i++)
    {
        flag[i] = 0;
        dist[i] = INT_MAX;
    }
    dist[0] = 0; // отсчет всегда идет от истока, исток - всегда индекс 0, сток - последний индекс
    do
    {
        tmp=INT_MAX;
        point=INT_MAX;
        for (i=0; i<n; i++)
        {
            if ((dist[i] < tmp) && (flag[i] == 0)) // если расстояние меньше и веришна не посещена
            {
                tmp = dist[i];
                point = i;
            }
        }
        if(point!=INT_MAX)
        {
            for(i=0; i<n; i++)
            {
                if((graph[point][i].cost >= 0) && (graph[point][i].edge == 1) && (graph[point][i].residual == 1))
                {
                    temp=tmp+graph[point][i].cost;
                    if (temp<dist[i])
                    {
                        dist[i]=temp;
                    }
                }
            }
            flag[point]=1;
        }
    } while (point<INT_MAX);
    if (dist[n-1] == INT_MAX)
        return dist;
    int *dst; // массив посещенных вершин
    if (!(dst = (int*) malloc(sizeof(int)*n)))
        exit (33);
    int end = n-1; // индекс конечной вершины = 5 - 1
    dst[0] = end + 1; // начальный элемент - конечная вершина
    int k = 1; // индекс предыдущей вершины
    int weight = dist[end]; // вес конечной вершины
    while (end != 0) // пока не дошли до начальной вершины
    {
        for (i = 0; i<n; i++) // просматриваем все вершины
            if ((graph[i][end].edge == 1) && (graph[i][end].residual == 1))   // если связь есть
            {
                int temp = weight - graph[i][end].cost; // определяем вес пути из предыдущей вершины
                if (temp == dist[i]) // если вес совпал с рассчитанным
                {                 // значит из этой вершины и был переход
                    weight = temp; // сохраняем новый вес
                    end = i;       // сохраняем предыдущую вершину
                    dst[k] = i+1; // и записываем ее в массив
                    k++;
                }
            }
    }
    int *template;
    if (!(template = (int*) malloc(sizeof(int)*k)))
        exit (33);
    int j=0;
    num = k;
    for (int i=k-1; i>=0; i--)
    {
        template[j] = dst[i] - 1;
        j++;
    }
    free(dst);
    free(dist);
    free(flag);
    return template;
}
int main()
{
    int n;
    int post, prod;
    int K; // общая потребность
    struct graf **graph;
        printf("Введите количество поставщиков: ");
        scanf("%d", &post);
        printf("Введите количество продавцов: ");
        scanf("%d", &prod);
        printf("\n");
        n = post+prod+2;
        if (!(graph = (struct graf**) malloc(sizeof(struct graf)*n)))// добавить проверку на выделение памяти
            return 33;
        for (int i = 0; i < n; i++)
            if (!(graph[i] = (struct graf*) malloc(n * sizeof(struct graf))))
                return 33;
        null (graph, n);
        K=0;
        for (int i = 1; i < 1 + post; i++) // источник-поставщики
        {
            printf("Введите запас у %d поставщика: ", i);
            scanf("%d", &(graph[0][i].capacity));
            while (graph[0][i].capacity < 0) {
                printf("Пропускная сопособность должна быть больше 0: ");
                scanf("%d", &(graph[0][i].capacity));
            }
            graph[0][i].rest_capacity = graph[0][i].capacity;
            graph[0][i].cost = 0;
            graph[0][i].edge = 1;
            graph[i][0].capacity = 0;
            graph[i][0].cost = 0;
            K += graph[0][i].capacity;
        }
        printf("\n");
        int d = 1; // просто счетчик для интерфейса
        for (int i = 1; i < 1 + post; i++) // поставщики-продавцы
        {
            for (int j = post + 1; j < n - 1; j++) {
                printf("Введите стоимость доставки за единицу от %d поставщика к %d продавцу: ", i, d);
                d++;
                scanf("%d", &(graph[i][j].cost));
                while (graph[i][j].cost < 0) {
                    printf("Cтоимость должна быть больше 0: ");
                    scanf("%d", &(graph[i][j].cost));
                }
                graph[i][j].capacity = INT_MAX;
                graph[i][j].rest_capacity = INT_MAX;
                graph[i][j].edge = 1;
                graph[j][i].capacity = 0;
                graph[j][i].cost = -1 * graph[i][j].cost;
            }
            d = 1;
        }
        printf("\n");
        for (int i = post + 1; i < n - 1; i++) // продавцы-сток
        {
            printf("Введите потребность у %d продавца: ", d);
            d++;
            scanf("%d", &(graph[i][n - 1].capacity));
            while (graph[i][n - 1].capacity < 0) {
                printf("Потребность должна быть больше 0: ");
                scanf("%d", &(graph[i][n - 1].capacity));
            }
            graph[i][n - 1].rest_capacity = graph[i][n - 1].capacity;
            graph[i][n - 1].cost = 0;
            graph[i][n - 1].edge = 1;
            graph[n - 1][i].cost = 0;
            graph[n - 1][i].capacity = 0;
        }
    int flow=0;
    int cost=0;
    int *path;
    while (flow<K)
    {
        residual(graph, n); // создаем новую остаточную сеть
        path = dijkstra(graph, n); // находим кратчайший путь
        if (path[n-1] == INT_MAX)
            break;
        int min_cap = K-flow;
        for(int i=0; i<num; i++)
        {
            if(i==num-1)
                break;
            if (graph[path[i]][path[i+1]].rest_capacity < min_cap)
                min_cap = graph[path[i]][path[i+1]].rest_capacity;
        }
        for(int i=0; i<num; i++)
        {
            if(i==num-1)
                break;
            graph[path[i]][path[i+1]].flow += min_cap;
            graph[path[i+1]][path[i]].flow -= min_cap;
            cost += graph[path[i]][path[i+1]].cost * min_cap;
        }
        flow += min_cap;
    }
    free(path);
    printf("\nМинимальная стоимость: %d\n\n", cost);
    printf("Оптимальный план перевозок:\n\n");
    printf("   ");
    for (int i=1; i<prod+1; i++)
        printf("B%d  ", i);
    printf("\n");
    for(int i=1; i<post+1; i++) //ВЫВОД РЕШЕНИЯ
    {
        printf("A%d  ", i);
        for (int j=post+1; j<n-1; j++)
        {
            printf("%d  ", graph[i][j].flow);
        }
       printf("\n");
    }
    free(graph);
  
    return 0;
}
